defmodule Expression.V2.Context do
  @moduledoc """
  The context supplied to a function generated by `Expression.V2.Compile.compile/1`

  This will be expanded with support for more attributes that a callback function
  can access but normal Expression evaluation can not.
  """
  defstruct vars: %{}, private: %{}, callback_module: Expression.V2.Callbacks.Standard

  @type t :: %__MODULE__{
          vars: map,
          private: map,
          callback_module: module
        }

  defmodule ContextVars do
    @behaviour Access
    defstruct path: [], vars: %{}, missing?: false

    def get_and_update(ctx_vars, key, function) do
      {_, new_vars} = Map.get_and_update(ctx_vars.vars, key, function)
      {ctx_vars, %{ctx_vars | vars: new_vars}}
    end

    def fetch(ctx_vars, key) do
      updated_path = [key | ctx_vars.path]

      {:ok,
       Map.get(ctx_vars.vars, key, %__MODULE__{path: updated_path, vars: %{}, missing?: true})}
    end

    def pop(ctx_vars, key) do
      {popped, updated_vars} = Map.pop(ctx_vars.vars, key)
      {popped, %{ctx_vars | vars: updated_vars}}
    end

    def new(vars) do
      %__MODULE__{vars: vars}
    end
  end

  defimpl String.Chars, for: ContextVars do
    def to_string(ctx_vars),
      do:
        "@" <>
          (ctx_vars.path
           |> Enum.reverse()
           |> Enum.join("."))
  end

  def new(vars \\ %{}, callback_module \\ Expression.V2.Callbacks.Standard),
    do: %__MODULE__{vars: ContextVars.new(vars), callback_module: callback_module}

  def private(ctx, key, value), do: %{ctx | private: Map.put(ctx.private, key, value)}
end
